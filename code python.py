# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ATxPqID1ECstO5QcmekloGtcBIsG3U7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style='whitegrid')
import warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("justice.csv")
df.head()

df.info()
df.isnull().sum()

df['issue_area'].fillna('Unknown', inplace=True)
df['decision_type'].fillna('Unknown', inplace=True)
df.dropna(subset=['majority_vote', 'minority_vote'], inplace=True)
df.drop_duplicates(inplace=True)
df.isnull().sum()

df.describe()
df.describe(include='object')
df['decision_type'].value_counts()

majority = np.array(df['majority_vote'])
minority = np.array(df['minority_vote'])

df['total_votes'] = majority + minority
df[['majority_vote', 'minority_vote', 'total_votes']].head()

# Count the values
decision_counts = df['decision_type'].value_counts()

# Set a threshold (e.g., less than 5%)
threshold = 0.05
total = decision_counts.sum()

# Split into main and small categories
main_parts = decision_counts[decision_counts / total >= threshold]
other_parts = decision_counts[decision_counts / total < threshold]

# Add "Others" if needed
if not other_parts.empty:
    main_parts['Others'] = other_parts.sum()

# Plot pie chart
plt.figure(figsize=(8, 8))
plt.pie(
    main_parts,
    labels=main_parts.index,
    autopct='%1.1f%%',
    startangle=140,
    colors=sns.color_palette("Set2")
)
plt.title("Distribution of Decision Types", fontsize=16, fontweight='bold', pad=20)
plt.axis('equal')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Count the values
decision_counts = df['decision_type'].value_counts()
total = decision_counts.sum()

# Group small values into 'Others'
threshold = 0.05
main_parts = decision_counts[decision_counts / total >= threshold]
other_parts = decision_counts[decision_counts / total < threshold]

if not other_parts.empty:
    main_parts['Others'] = other_parts.sum()

# Colors and labels
colors = sns.color_palette("pastel")[0:len(main_parts)]

# Plot
fig, ax = plt.subplots(figsize=(8, 8))

wedges, texts, autotexts = ax.pie(
    main_parts,
    labels=main_parts.index,
    autopct='%1.1f%%',
    startangle=140,
    colors=colors,
    pctdistance=0.8,
    wedgeprops={'edgecolor': 'white', 'linewidth': 2}  # Rounded look
)

# Make % labels more readable
for autotext in autotexts:
    autotext.set_color('black')
    autotext.set_fontsize(10)
    autotext.set_weight('bold')
    autotext.set_bbox(dict(facecolor='white', edgecolor='none', boxstyle='round,pad=0.2'))

# Make it a donut
centre_circle = plt.Circle((0, 0), 0.60, fc='white')
fig.gca().add_artist(centre_circle)

# Title
plt.title("Distribution of Decision Types", fontsize=16, fontweight='bold', pad=20)
ax.axis('equal')  # Equal aspect ratio
plt.tight_layout()
plt.show()

# Get counts per year
cases_per_year = df['term'].value_counts().sort_index()

# Set style
sns.set_style("whitegrid")

# Create the plot
plt.figure(figsize=(14, 6))
ax = sns.lineplot(
    x=cases_per_year.index,
    y=cases_per_year.values,
    marker='o',
    linewidth=2.5,
    color='#008080',
    markersize=8
)

# Add value labels on each point
for x, y in zip(cases_per_year.index, cases_per_year.values):
    ax.text(x, y + 0.5, str(y), ha='center', va='bottom', fontsize=9, color='gray')

# Customizing the plot
plt.title("üìä Supreme Court Cases by Year", fontsize=18, fontweight='bold', pad=20)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Number of Cases", fontsize=12)
plt.xticks(rotation=45)

# Fix overlapping ticks
if len(cases_per_year) > 20:
    step = max(len(cases_per_year) // 15, 1)
    plt.xticks(cases_per_year.index[::step])

plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

plt.figure(figsize=(14,6))
sns.boxplot(x='issue_area', y='majority_vote', data=df, palette="coolwarm")
plt.title("Boxplot of Majority Vote by Issue Area", fontsize=16)
plt.xticks(rotation=90)
plt.show()

# Sort by median majority vote
order = df.groupby('issue_area')['majority_vote'].median().sort_values().index

plt.figure(figsize=(16, 6))
sns.set(style="whitegrid", font_scale=1.1)

# Clean boxplot only
sns.boxplot(
    x='issue_area',
    y='majority_vote',
    data=df,
    palette='viridis',
    order=order,
    width=0.6,
    fliersize=0  # Hide outliers
)

# Titles and labels
plt.title("Majority Vote Distribution by Issue Area", fontsize=18, fontweight='bold', pad=15)
plt.xlabel("Issue Area", fontsize=12)
plt.ylabel("Majority Vote Count", fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Correlation matrix
corr = df[['majority_vote', 'minority_vote', 'total_votes']].corr()

plt.figure(figsize=(8, 5))
sns.set(style="white")

# Heatmap with upgrades
sns.heatmap(
    corr,
    annot=True,
    fmt=".2f",
    cmap='coolwarm',       # Better visual balance than RdBu_r
    linewidths=0.5,
    linecolor='lightgray',
    square=False,
    cbar_kws={'shrink': 0.8, 'label': 'Correlation'}
)

# Title and layout
plt.title("üîó Correlation Between Vote Types", fontsize=16, fontweight='bold', pad=15)
plt.xticks(fontsize=11)
plt.yticks(fontsize=11)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Get top 10 issue areas
top_issues = df['issue_area'].value_counts().nlargest(10)

plt.figure(figsize=(12, 6))
sns.set(style="whitegrid", font_scale=1.1)

# Barplot
ax = sns.barplot(
    x=top_issues.index,
    y=top_issues.values,
    palette='husl',
    edgecolor='0.2'
)

# Add value labels on bars
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2, p.get_height()),
                ha='center', va='bottom',
                fontsize=10, fontweight='semibold')

# Titles and labels
plt.title("üìå Top 10 Issue Areas by Case Count", fontsize=16, fontweight='bold', pad=15)
plt.ylabel("Number of Cases", fontsize=12)
plt.xlabel("Issue Area", fontsize=12)
plt.xticks(rotation=40, ha='right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Correlation matrix between vote-related columns
correlation_matrix = df[['majority_vote', 'minority_vote', 'total_votes']].corr()

print("üîó Correlation Matrix:")
print(correlation_matrix.round(2))  # Round for cleaner print output

# Heatmap visualization
plt.figure(figsize=(6, 4))
sns.set(style="white", font_scale=1.1)
sns.heatmap(
    correlation_matrix,
    annot=True,
    fmt=".2f",
    cmap='YlGnBu',
    linewidths=0.5,
    linecolor='white',
    square=True,
    cbar_kws={'shrink': 0.8, 'label': 'Correlation Coefficient'}
)


# Title and style
plt.title("üîç Correlation Between Vote Types", fontsize=15, fontweight='bold', pad=12)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(6, 4))
sns.heatmap(
    covariance_matrix,
    annot=True,
    fmt=".2f",
    cmap='BuPu',  # Try 'Blues', 'BuGn', 'YlOrBr' etc. too
    linewidths=0.5,
    linecolor='white',
    square=True,
    cbar_kws={'shrink': 0.8, 'label': 'Covariance'}
)

plt.title("üìê Covariance Between Vote Types", fontsize=15, fontweight='bold', pad=12)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# üìä Visualizing outliers in majority votes
plt.figure(figsize=(10, 4))
sns.set(style="whitegrid")

sns.boxplot(
    x=df['majority_vote'],
    color='#4B0082',  # Indigo
    fliersize=5,
    linewidth=2
)



plt.title("üîç Outliers in Majority Vote", fontsize=14, fontweight='bold', pad=10)
plt.xlabel("Majority Vote Count")
plt.tight_layout()
plt.show()

# üßÆ Outlier Detection using IQR
Q1 = df['majority_vote'].quantile(0.25)
Q3 = df['majority_vote'].quantile(0.75)
IQR = Q3 - Q1

# Define bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Find outliers
outliers = df[(df['majority_vote'] < lower_bound) | (df['majority_vote'] > upper_bound)]

print(f"üìå Outlier cases found: {len(outliers)}")
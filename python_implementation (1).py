# -*- coding: utf-8 -*-
"""Python_implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ATxPqID1ECstO5QcmekloGtcBIsG3U7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style='whitegrid')
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("/content/python_justice.csv")
df.head()

print(df.info())
print(df.isnull().sum())

df['issue_area'] = df['issue_area'].fillna('Unknown')
df['decision_type'] = df['decision_type'].fillna('Unknown')


df = df.dropna(subset=['majority_vote', 'minority_vote'])

df = df.drop_duplicates()


print("Remaining missing values:")
print(df.isnull().sum())

print("Numerical Features Summary:")
print(df.describe())

print("\nCategorical Features Summary:")
print(df.describe(include='object'))

print("\nDecision Type Counts:")
print(df['decision_type'].value_counts())

df['total_votes'] = df['majority_vote'] + df['minority_vote']

df[['majority_vote', 'minority_vote', 'total_votes']].head()

print("Numerical Features Summary:")
print(df.describe())

print("\nCategorical Features Summary:")
print(df.describe(include='object'))


print("\nDecision Type Counts:")
print(df['decision_type'].value_counts())

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("python_justice.csv")
issue_counts = data['issue_area'].value_counts()

threshold = 5
total = issue_counts.sum()
small_segments = issue_counts[issue_counts / total * 100 < threshold]
large_segments = issue_counts[issue_counts / total * 100 >= threshold]

if not small_segments.empty:
    combined_counts = large_segments.copy()
    combined_counts['Others'] = small_segments.sum()
else:
    combined_counts = issue_counts

num_slices = len(combined_counts)
gradient_colors = sns.color_palette("Blues", n_colors=num_slices)[::-1]

plt.figure(figsize=(9, 9))
wedges, texts, autotexts = plt.pie(combined_counts, labels=combined_counts.index,
                                   autopct='%1.0f%%', startangle=90,
                                   colors=gradient_colors,
                                   textprops={'fontsize': 12, 'color': 'navy'},
                                   wedgeprops={'edgecolor': 'white', 'linewidth': 1.5})
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontsize(11)
    autotext.set_weight('bold')
for text in texts:
    text.set_fontsize(12)
plt.title('Supreme Court Cases by Issue Area', fontsize=18, color='navy', pad=15)
plt.axis('equal')
plt.gcf().set_facecolor('white')
plt.tight_layout()
plt.show()

cases_per_year = df['term'].value_counts().sort_index()

plt.figure(figsize=(15, 7))
ax = sns.lineplot(
    x=cases_per_year.index,
    y=cases_per_year.values,
    marker='o',
    linewidth=3,
    color='#4C78A8',
    markersize=10,
    markeredgecolor='white',
    markerfacecolor='#A3BFFA',
)

for i, (x, y) in enumerate(zip(cases_per_year.index, cases_per_year.values)):
    offset = 1 if i % 2 == 0 else -1.5
    ax.text(x, y + offset, str(y), ha='center', va='bottom' if offset > 0 else 'top',
            fontsize=10, color='navy', weight='semibold')


plt.title("Supreme Court Cases by Year", fontsize=20, fontweight='bold',
          color='navy', pad=25)
plt.xlabel("Year", fontsize=14, color='navy')
plt.ylabel("Number of Cases", fontsize=14, color='navy')
plt.xticks(rotation=45, fontsize=11, color='navy')
plt.yticks(fontsize=11, color='navy')


if len(cases_per_year) > 20:
    step = max(len(cases_per_year) // 12, 1)
    plt.xticks(cases_per_year.index[::step])


plt.grid(True, linestyle='--', alpha=0.5, color='gray')
plt.gca().set_facecolor('white')
plt.gcf().set_facecolor('white')

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_color('gray')
ax.spines['bottom'].set_color('gray')

plt.tight_layout()
plt.show()

order = df.groupby('issue_area')['majority_vote'].median().sort_values().index

plt.figure(figsize=(16, 6))
sns.set(style="whitegrid", font_scale=1.1)

sns.boxplot(
    x='issue_area',
    y='majority_vote',
    data=df,
    palette='viridis',
    order=order,
    width=0.6,
    fliersize=0
)

plt.title("Majority Vote Distribution by Issue Area", fontsize=18, fontweight='bold', pad=15)
plt.xlabel("Issue Area", fontsize=12)
plt.ylabel("Majority Vote Count", fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

df = pd.read_csv("/content/python_justice.csv")
df.head()

plt.figure(figsize=(12, 6))
sns.countplot(x='decision_type', data=df, palette='viridis')
plt.title('Decision Type Distribution', fontsize=16)
plt.xlabel('Decision Type', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns


correlation_matrix = df[['majority_vote', 'minority_vote', 'total_votes']].corr()

print("üîó Correlation Matrix:")
print(correlation_matrix.round(2))


plt.figure(figsize=(6, 4))
sns.set(style="white", font_scale=1.1)
sns.heatmap(
    correlation_matrix,
    annot=True,
    fmt=".2f",
    cmap='YlGnBu',
    linewidths=0.5,
    linecolor='white',
    square=True,
    cbar_kws={'shrink': 0.8, 'label': 'Correlation Coefficient'}
)



plt.title("üîç Correlation Between Vote Types", fontsize=15, fontweight='bold', pad=12)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(6, 4))
sns.heatmap(
    covariance_matrix,
    annot=True,
    fmt=".2f",
    cmap='BuPu',
    linewidths=0.5,
    linecolor='white',
    square=True,
    cbar_kws={'shrink': 0.8, 'label': 'Covariance'}
)

plt.title("üìê Covariance Between Vote Types", fontsize=15, fontweight='bold', pad=12)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 4))
sns.set(style="whitegrid")

sns.boxplot(
    x=df['majority_vote'],
    color='#4B0082',
    fliersize=5,
    linewidth=2
)



plt.title("üîç Outliers in Majority Vote", fontsize=14, fontweight='bold', pad=10)
plt.xlabel("Majority Vote Count")
plt.tight_layout()
plt.show()


Q1 = df['majority_vote'].quantile(0.25)
Q3 = df['majority_vote'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers = df[(df['majority_vote'] < lower_bound) | (df['majority_vote'] > upper_bound)]

print(f"üìå Outlier cases found: {len(outliers)}")

import matplotlib.pyplot as plt

fig, axes = plt.subplots(2, 2, figsize=(15, 10))

# Plot 1: Decision Type Distribution
sns.countplot(x='decision_type', data=df, palette='viridis', ax=axes[0, 0])
axes[0, 0].set_title('Decision Type Distribution')
axes[0, 0].set_xlabel('Decision Type')
axes[0, 0].set_ylabel('Count')
axes[0, 0].tick_params(axis='x', rotation=45)

# Plot 2: Cases per year
cases_per_year = df['term'].value_counts().sort_index()
sns.lineplot(x=cases_per_year.index, y=cases_per_year.values, marker='o', ax=axes[0, 1])
axes[0,1].set_title("Supreme Court Cases by Year")

# Plot 3: Majority Vote Distribution
order = df.groupby('issue_area')['majority_vote'].median().sort_values().index
sns.boxplot(x='issue_area', y='majority_vote', data=df, palette='viridis', order=order, ax=axes[1, 0])
axes[1, 0].set_title("Majority Vote Distribution by Issue Area")
axes[1,0].tick_params(axis='x', rotation=45)

# Plot 4: Pie chart of Issue Areas
issue_counts = df['issue_area'].value_counts()
threshold = 5
total = issue_counts.sum()
small_segments = issue_counts[issue_counts / total * 100 < threshold]
large_segments = issue_counts[issue_counts / total * 100 >= threshold]
combined_counts = large_segments.copy()
combined_counts['Others'] = small_segments.sum()

axes[1,1].pie(combined_counts, labels=combined_counts.index, autopct='%1.0f%%', startangle=90)
axes[1,1].set_title('Supreme Court Cases by Issue Area')

plt.tight_layout()
plt.show()